<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Smartchart开发手册</title>
    <link>https://help.smartchart.cn/docs/3.%E5%9B%BE%E5%BD%A2%E5%BC%80%E5%8F%91/%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/</link>
    <description>Recent content on Smartchart开发手册</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://help.smartchart.cn/docs/3.%E5%9B%BE%E5%BD%A2%E5%BC%80%E5%8F%91/%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://help.smartchart.cn/docs/3.%E5%9B%BE%E5%BD%A2%E5%BC%80%E5%8F%91/%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/%E5%9B%BE%E5%BD%A2%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://help.smartchart.cn/docs/3.%E5%9B%BE%E5%BD%A2%E5%BC%80%E5%8F%91/%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/%E5%9B%BE%E5%BD%A2%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%87%BD%E6%95%B0/</guid>
      <description>应用场景 # 在图形开发中，我们可能需要使用js对传递过来的数据进行处理
图形中可用转化函数 # 数据集转化 # 函数名 函数说明 样列 ds_transform(dataset) 行列转置 ds_createMap(dataset) 将数组生成结果表示为key-&amp;gt;[], 常用于echarts指定数据 ds_createMap_all(dataset) 将二维数组转成字典[{A:A1,B:B1,C:C1},&amp;hellip;], 常用于饼图 ds_mapToList(dataset) 将字典还原成二维数组, 常用于将nosql(mongodb,es..)数据源数据处理 ds_pivot(dataset) 将二维数组(维度,维度,值)的第二列的维度透视为行 ds_distinct(dataset) 对单个或多个二维数组去重 ds_filter(dataset, fun) fun为函数如: item=&amp;gt;item[0]==&amp;lsquo;顺德&amp;rsquo; ds_sort(dataset, index=0, asc=true) 按照列序号排序,默认升序,index参数可以是函数,如(a,b)=&amp;gt;a.qty-b.qty ds_remove_column(dataset,remove_list=[0]) 默认移除第一列, 也要移除指定的多个列 ds_split(data,sep=&amp;rsquo;,&amp;rsquo;,head_add=[]) 将第一列拆分成多个字段,默认逗号分隔, 如果不传表头,取SQL中的字段名拆分 数据集关联 # 函数名 函数说明 样列 ds_leftjoin(a,b) 按照第一列左关联两个数据集 ds_crossjoin(a,b) ds_fulljoin(a,b) ds_union(a,b) 合并两个数据集,取第一个数据集的表头 数据集刷新 # 函数名 函数说明 样列 ds_param(name) 传入参数名,获取图形点击时传递来的参数值 ds_setParam(&amp;lsquo;参数名&amp;rsquo;, 参数值) 设定全局参数, 此方法将自动判断当参数值为空时, 删除参数回到初始未传参状态 ds_refresh(序号, param=filter_param) 刷新图形,默认采取全局参数刷新,也可指定param,参数为字典{&amp;ldquo;参数名&amp;rdquo;:&amp;ldquo;值&amp;rdquo;,&amp;hellip;} 数据处理 # 函数名 函数说明 样列 ds_rowname(dataset,start_row=1,column=0) 获取指定列的数据, 常用于获取维度 ds_toThousands(num) 转逗号分隔的千分位 ds_round(num,qty=2) 小数点处理, 默认保留两位小数 Excel数据集 # 函数名 函数说明 样列 ds_excel_refresh(dataset) 刷新复杂报表, dataset格式:{df0:二维数组, df1:二维数组,.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://help.smartchart.cn/docs/3.%E5%9B%BE%E5%BD%A2%E5%BC%80%E5%8F%91/%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/Jquery%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://help.smartchart.cn/docs/3.%E5%9B%BE%E5%BD%A2%E5%BC%80%E5%8F%91/%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/Jquery%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</guid>
      <description>在做自定义html组件的时候你可能需要用得上：
一、向上遍历
parent() 获取元素的直接父元素 $(&amp;#34;span&amp;#34;).parent().css({ &amp;#34;color&amp;#34;:&amp;#34;red&amp;#34;, &amp;#34;border&amp;#34;:&amp;#34;1px solid red&amp;#34; }) parents() 获取元素的祖先元素，直到根元素html $(&amp;#34;span&amp;#34;).parents().css({ &amp;#34;color&amp;#34;:&amp;#34;red&amp;#34;, &amp;#34;border&amp;#34;:&amp;#34;1px solid red&amp;#34; }) parentsUntil() 向上查找直到遇见某个祖先元素为止 $(&amp;#34;span&amp;#34;).parentsUntil(&amp;#34;div&amp;#34;).css({	//向上查找直到遇见div元素为止 &amp;#34;color&amp;#34;:&amp;#34;red&amp;#34;, &amp;#34;border&amp;#34;:&amp;#34;1px solid red&amp;#34; }) 二、向下遍历
1. children() 查找子元素[按照从属关系] $(&amp;#34;ul&amp;#34;).children(&amp;#34;li:first-child&amp;#34;) 2. find() 按照指定的条件向下查找 $(&amp;#34;ul&amp;#34;).find(&amp;#34;span&amp;#34;) 三、水平遍历
1. siblings() 获取元素的所有兄弟元素 $(&amp;#34;.start&amp;#34;).siblings().css({color:&amp;#34;red&amp;#34;,border:&amp;#34;2px solid red&amp;#34;}) 2. next() 获取元素的下一个兄弟元素 $(&amp;#34;.start&amp;#34;).next().css({color:&amp;#34;red&amp;#34;,border:&amp;#34;2px solid red&amp;#34;}) 3. nextAll() 获取其后的所有兄弟元素 $(&amp;#34;.start&amp;#34;).nextAll().css({color:&amp;#34;red&amp;#34;,border:&amp;#34;2px solid red&amp;#34;}) 4. nextUntil() 查找后面所有的兄弟元素，直到遇见某个元素为止 $(&amp;#34;.start&amp;#34;).nextUntil(&amp;#34;li:last-child&amp;#34;).css({color:&amp;#34;red&amp;#34;,border:&amp;#34;2px solid red&amp;#34;}) 5. prev() 查找上一个兄弟元素 $(&amp;#34;li.start&amp;#34;).prev().css({color:&amp;#34;red&amp;#34;,border:&amp;#34;2px solid red&amp;#34;}) 6. prevAll() 查找上面所有的兄弟元素 $(&amp;#34;li.</description>
    </item>
    
  </channel>
</rss>
